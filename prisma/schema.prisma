generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  DRIVER
  MARKETER
  RESTAURANT_OWNER
}

enum VehicleType {
  MOTORCYCLE // دراجة نارية
  CAR // سيارة
  VAN // فان
  TRUCK // شاحنة صغيرة
  BICYCLE // دراجة هوائية
}

enum RestaurantStatus {
  ACTIVE // Live and visible to customers
  SUSPENDED // Temporarily disabled by admin
  INACTIVE // Disabled by owner
}

enum OrderStatus {
  PENDING
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  CANCELED
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  DONE
  REJECTED
}

enum RequestType {
  BUG
  FEATURE
  IMPROVEMENT
}

enum OrderType {
  DINE_IN   // داخل المطعم
  DINE_OUT  // توصيل خارجي
}

enum DineInOrderStatus {
  NEW           // جديد
  PREPARING     // قيد التحضير
  READY         // جاهز
  COMPLETED     // مكتمل
  CANCELLED     // ملغى
}

enum TermType {
  WEBSITE_POLICY
  RETURN_POLICY
  PRIVACY_POLICY
  SHIPPING_POLICY
  TERMS_OF_SERVICE
  GENERAL_TERMS
  GENERIC
}

enum EntityType {
  PAGE
  PRODUCT
  CATEGORY
  BLOG_POST
  BLOG_CATEGORY
}

enum NotificationType {
  WARNING
  DESTRUCTIVE
  INFO
  SUCCESS
  ORDER
  PROMO
  SYSTEM
}

enum RatingType {
  PURCHASE
  DELIVERY
  SUPPORT
  APP
  PRODUCT
  OTHER
}

enum ErrorSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ErrorStatus {
  NEW
  INVESTIGATING
  IN_PROGRESS
  RESOLVED
  IGNORED
}

model Country {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @default("") // "مطبخ هندي", "مطبخ عربي", "مطبخ إيطالي"
  slug        String  @unique @default("") // "indian", "arabic", "italian"
  logo        String? // Cuisine icon/flag image
  description String? // Short description about cuisine

  // SEO Article Fields (Modern SEO - No meta keywords)
  article         String?   @db.String // Long-form educational content (1000+ words)
  articleTitle    String? // Custom H1 title for article page
  metaDescription String? // Custom meta description (150-160 chars)
  publishedAt     DateTime? // Article publish timestamp for freshness signals

  restaurants   Restaurant[]         @relation("CountryRestaurants")
  translations  CountryTranslation[]
  popularDishes PopularDish[]        @relation("CountryPopularDishes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("suppliers") // ZERO-RISK: Maps to existing 'suppliers' collection
}

model CountryTranslation {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  countryId    String   @db.ObjectId
  country      Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  languageCode String // "ar", "en", "ur", "hi", etc.
  name         String // Translated cuisine name
  description  String? // Translated description
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([countryId, languageCode])
  @@map("suppliertranslations") // ZERO-RISK: Maps to existing collection
}

// ============================================
// POPULAR DISH - Showcase dishes for each cuisine
// ============================================

model PopularDish {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String // Dish name (e.g., "Chicken Biryani", "برياني دجاج")
  description String? // Description of the dish
  imageUrl    String? // Dish image

  // Link to cuisine/country
  countryId String  @db.ObjectId
  country   Country @relation("CountryPopularDishes", fields: [countryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([countryId]) // Fast: get popular dishes by cuisine
  @@map("populardishes")
}

// ============================================
// RESTAURANT (was Category)
// ============================================

model Restaurant {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String  @unique
  description String?
  imageUrl    String? // Restaurant logo

  // COUNTRY RELATIONSHIP (Cuisine Type)
  countryId String  @db.ObjectId
  country   Country @relation("CountryRestaurants", fields: [countryId], references: [id])

  // OWNERSHIP (SIMPLE - no complex relations)
  userId String @db.ObjectId // Restaurant owner's User ID

  // CONTACT & LOCATION
  phone     String?
  whatsapp  String? // WhatsApp number for customer contact
  email     String?
  address   String?
  latitude  String? // GPS coordinate
  longitude String? // GPS coordinate

  // SOCIAL MEDIA
  facebook  String? // Facebook page URL
  instagram String? // Instagram profile URL
  snapchat  String? // Snapchat profile URL
  tiktok    String? // TikTok profile URL
  twitter   String? // Twitter/X profile URL

  // OPERATIONAL DETAILS
  workingHours   String? // JSON or formatted string
  deliveryTime   String? // e.g., "30-45 دقيقة"
  minOrder       Float? // Minimum order amount
  deliveryFee    Float? // Delivery fee
  hasOwnDelivery Boolean @default(false) // Own delivery service (not aggregator)

  // PROFILE CONTENT
  bio            String? // Restaurant story/description
  specialties    String[] @default([]) // ["برياني حيدرابادي", "تكا مسالا"]
  cuisineTypes   String[] @default([]) // ["هندي", "باكستاني"]
  paymentMethods String[] @default([]) // ["Cash", "Card", "Mada", "Apple Pay"]
  coverImage     String? // Banner/cover image

  // RATINGS & STATUS
  rating      Float? // Average rating (1-5)
  reviewCount Int     @default(0) // Number of reviews
  isVerified  Boolean @default(false) // Verified badge
  isPopular   Boolean @default(false) // Featured/popular badge

  // STATUS CONTROL
  status           RestaurantStatus @default(ACTIVE)
  suspendedAt      DateTime?
  suspendedBy      String?          @db.ObjectId // Admin who suspended
  suspensionReason String?

  // QR CODE TRACKING
  qrCodeUrl       String?   // Cached QR code image URL (Cloudinary)
  qrCodeGenerated DateTime? // When QR was last generated
  qrScanCount     Int       @default(0) // Total scans
  lastQrScan      DateTime? // Last scan timestamp

  // RELATIONS
  qrScans         QRCodeScan[] // QR code scan tracking
  dishes          Dish[]                  @relation("RestaurantDishes") // Direct relation to dishes
  dishAssignments RestaurantDish[]        @relation("RestaurantDishAssignments") // Join table with dishes
  translations    RestaurantTranslation[]
  services        RestaurantService[] // Dynamic services
  features        RestaurantFeature[] // Dynamic features
  images          RestaurantImage[] // Gallery images
  videos          RestaurantVideo[] // YouTube videos
  reviews         RestaurantReview[] // Customer reviews
  post            RestaurantPost? // Single blog post
  favorites       RestaurantFavorite[] // Users who favorited this restaurant
  tables          RestaurantTable[] // Restaurant tables
  dineInOrders    DineInOrder[]     @relation("RestaurantDineInOrders") // Dine-in orders

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // Fast: get all restaurants for owner
  @@index([countryId]) // Fast: get restaurants by cuisine
  @@index([status]) // Fast: get active restaurants
  @@map("categories") // ZERO-RISK: Maps to existing 'categories' collection
}

model RestaurantTranslation {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  languageCode String // "ar", "en", "ur", etc.
  name         String // Translated restaurant name
  description  String? // Translated description
  bio          String? // Translated bio/story
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([restaurantId, languageCode])
  @@map("categorytranslations") // ZERO-RISK: Maps to existing collection
}

// ============================================
// MASTER SERVICES (Centralized - Super Admin)
// ============================================

model MasterService {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // e.g., "WiFi مجاني"
  nameEn      String?  // English translation
  imageUrl    String?  // Icon/image URL (Cloudinary or external)
  description String?
  category    String?  // e.g., "amenities", "payment", "dining"
  isActive    Boolean  @default(true)
  displayOrder Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  restaurants RestaurantService[]
  
  @@map("masterservices")
}

// ============================================
// MASTER FEATURES (Centralized - Super Admin)
// ============================================

model MasterFeature {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique // e.g., "Award-winning chef"
  titleEn     String?  // English translation
  imageUrl    String?  // Icon/image URL (Cloudinary or external)
  description String
  category    String?  // e.g., "quality", "experience", "specialty"
  isActive    Boolean  @default(true)
  displayOrder Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  restaurants RestaurantFeature[]
  
  @@map("masterfeatures")
}

// ============================================
// MASTER DISH CATEGORIES (Centralized - Super Admin)
// ============================================

model MasterDishCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // e.g., "حلويات", "مقبلات"
  nameEn      String?  // English translation: "Desserts", "Appetizers"
  imageUrl    String?  // Optional icon/image URL
  description String?
  isActive    Boolean  @default(true)
  displayOrder Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  dishes      Dish[]   @relation("DishCategory")
  
  @@map("masterdishcategories")
}

// ============================================
// RESTAURANT SERVICES (Restaurant Selection)
// ============================================

model RestaurantService {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId    String        @db.ObjectId
  restaurant      Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  masterServiceId String        @db.ObjectId
  masterService   MasterService @relation(fields: [masterServiceId], references: [id], onDelete: Cascade)
  isActive        Boolean       @default(true)
  displayOrder    Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@unique([restaurantId, masterServiceId])
  @@index([restaurantId])
  @@index([masterServiceId])
  @@map("restaurantservices")
}

// ============================================
// RESTAURANT FEATURES (Restaurant Selection)
// ============================================

model RestaurantFeature {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId    String        @db.ObjectId
  restaurant      Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  masterFeatureId String        @db.ObjectId
  masterFeature   MasterFeature @relation(fields: [masterFeatureId], references: [id], onDelete: Cascade)
  isActive        Boolean       @default(true)
  displayOrder    Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@unique([restaurantId, masterFeatureId])
  @@index([restaurantId])
  @@index([masterFeatureId])
  @@map("restaurantfeatures")
}

// ============================================
// RESTAURANT IMAGES (Gallery)
// ============================================

model RestaurantImage {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  imageUrl     String // Cloudinary or image URL
  caption      String? // Optional caption
  order        Int        @default(0) // Display order
  createdAt    DateTime   @default(now())

  @@index([restaurantId])
}

// ============================================
// RESTAURANT VIDEOS (YouTube)
// ============================================

model RestaurantVideo {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  youtubeUrl   String // Full YouTube URL
  videoId      String // Extracted YouTube video ID
  title        String // Video title
  description  String? // Optional description
  thumbnailUrl String? // YouTube thumbnail URL (auto-extracted)
  order        Int     @default(0) // Display order
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([restaurantId])
  @@map("restaurantvideos")
}

// ============================================
// RESTAURANT REVIEWS (Purchase-Verified)
// ============================================

model RestaurantReview {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  // Customer who wrote review
  customerId String @db.ObjectId
  customer   User   @relation("CustomerReviews", fields: [customerId], references: [id])

  // Review content
  rating  Int // 1-5 stars
  title   String?
  comment String
  images  String[] @default([])

  // Owner response
  ownerResponse String?
  respondedAt   DateTime?

  // Super Admin moderation (platform level)
  isApproved   Boolean   @default(true) // Auto-publish by default
  isReported   Boolean   @default(false)
  reportReason String?
  moderatedBy  String?   @db.ObjectId // Admin who moderated
  moderatedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([customerId, restaurantId]) // One review per user per restaurant
  @@index([restaurantId])
  @@index([customerId])
  @@map("restaurantreviews")
}

// ============================================
// RESTAURANT BLOG POST (Single per Restaurant)
// ============================================

model RestaurantPost {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @unique @db.ObjectId // One blog per restaurant
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  title    String
  content  String  @db.String // Rich text content
  excerpt  String? // Short summary
  imageUrl String? // Featured image

  isPublished Boolean   @default(false)
  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("restaurantposts")
}

// ============================================
// QR CODE SCAN TRACKING
// ============================================

model QRCodeScan {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // Scan metadata
  scannedAt    DateTime   @default(now())
  ipAddress    String?    // For unique visitor tracking
  userAgent    String?    // Device info (iOS/Android/Desktop)
  referrer     String?    // Where they came from
  
  // Location (from IP geolocation - optional)
  city         String?
  country      String?
  
  @@index([restaurantId])
  @@index([scannedAt])
  @@map("qrcodescans")
}

// ============================================
// RESTAURANT-DISH JOIN TABLE (was CategoryProduct)
// ============================================

model RestaurantDish {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String     @db.ObjectId // Keep field names for @@map compatibility
  productId  String     @db.ObjectId
  category   Restaurant @relation("RestaurantDishAssignments", fields: [categoryId], references: [id], onDelete: Cascade)
  product    Dish       @relation("DishRestaurantAssignments", fields: [productId], references: [id], onDelete: Cascade)
  assignedAt DateTime   @default(now())

  @@unique([categoryId, productId])
  @@map("categoryproducts") // ZERO-RISK: Maps to existing collection
}

// ============================================
// DISH (was Product) - Menu Items
// ============================================

model Dish {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String   @default("")
  description    String   @default("")
  slug           String   @unique @default("")
  price          Float    @default(0)
  compareAtPrice Float? // Original price (for discounts)
  costPrice      Float? // Cost to restaurant (internal)
  size           String?
  details        String?
  imageUrl       String? // Main image
  images         String[] @default([]) // Multiple images

  // RESTAURANT RELATIONSHIP
  // NOTE: We keep 'supplierId' field name for @@map compatibility
  // but it now points to Restaurant, not Supplier!
  supplierId String     @db.ObjectId
  type       String     @default("dish")
  supplier   Restaurant @relation("RestaurantDishes", fields: [supplierId], references: [id])

  // DISH CATEGORY RELATIONSHIP (optional)
  dishCategoryId String?              @db.ObjectId
  dishCategory   MasterDishCategory? @relation("DishCategory", fields: [dishCategoryId], references: [id])

  // EXISTING PRODUCT FIELDS (kept for backward compatibility)
  productCode String?
  gtin        String?
  material    String?
  brand       String?
  color       String?
  dimensions  String?
  weight      String?
  features    String[] @default([])

  requiresShipping    Boolean @default(true)
  shippingDays        String? @default("3-5")
  returnPeriodDays    Int?    @default(14)
  hasQualityGuarantee Boolean @default(true)
  careInstructions    String?

  // AVAILABILITY
  published       Boolean @default(false) // Visible to customers
  outOfStock      Boolean @default(false) // Out of stock
  manageInventory Boolean @default(true) // Track inventory
  stockQuantity   Int? // Current stock level

  // RATINGS
  rating       Float?
  reviewCount  Int      @default(0)
  reviews      Review[]
  previewCount Int      @default(0) // View count

  // KEEP ALL EXISTING RELATIONS (for backward compatibility)
  wishlistedBy          WishlistItem[]
  cartItems             CartItem[]
  orderItems            OrderItem[]
  categoryAssignments   CategoryProduct[] // Old join table (backward compatibility)
  restaurantAssignments RestaurantDish[]  @relation("DishRestaurantAssignments") // New join table
  offerAssignments      OfferProduct[]
  dineInOrderItems      DineInOrderItem[] @relation("DishDineInOrders") // Dine-in order items

  tags         String[]          @default([])
  translations DishTranslation[]
  categorySlug String? // Will be restaurantSlug logically

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // INDEXES for performance
  @@index([categorySlug])
  @@index([published, createdAt])
  @@index([published, outOfStock, createdAt])
  @@index([supplierId, published, outOfStock])
  @@index([imageUrl])
  @@index([rating])
  @@index([price])
  @@map("products") // ZERO-RISK: Maps to existing 'products' collection
}

model DishTranslation {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  productId    String   @db.ObjectId // Keep name for @@map
  product      Dish     @relation(fields: [productId], references: [id], onDelete: Cascade)
  languageCode String
  name         String // Translated dish name
  details      String? // Translated details
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([productId, languageCode])
  @@map("producttranslations") // ZERO-RISK: Maps to existing collection
}

model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  phone               String?            @unique
  name                String? // moved from Driver
  email               String? // moved from Driver
  emailVerified       DateTime?          @map("email_verified")
  password            String? // moved from Driver
  image               String? // moved from Driver (was imageUrl)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  accounts            Account[]
  role                UserRole           @default(CUSTOMER) // Use enum for roles
  isOtp               Boolean            @default(false)
  isOauth             Boolean            @default(false)
  otpCode             String?            @default("1234")
  reviews             Review[] // User's product reviews
  wishlist            WishlistItem[] // User's wishlist items
  restaurantFavorites RestaurantFavorite[] // User's favorite restaurants
  cart                Cart? // User's cart
  UserNotification    UserNotification[]
  errorLogs           ErrorLog[]
  // pushSubscriptions   PushSubscription[] // Removed - web push notifications disabled
  // Driver-specific fields
  vehicleType         VehicleType? // Type of vehicle for drivers
  vehiclePlateNumber  String? // Vehicle plate number
  vehicleColor        String? // Vehicle color
  vehicleModel        String? // Vehicle model (e.g., "Honda CBR", "Toyota Camry")
  driverLicenseNumber String? // Driver's license number
  isActive            Boolean            @default(true) // For driver availability management
  maxOrders           Int?               @default(3) // Maximum orders driver can handle simultaneously
  experience          Int? // Years of driving experience

  // Relations for orders as customer and as driver
  customerOrders    Order[]            @relation("OrderCustomer")
  driverOrders      Order[]            @relation("OrderDriver")
  activeTrips       ActiveTrip[]       @relation("ActiveTripDriver")
  addresses         Address[]
  orderRatings      OrderRating[] // Ratings submitted by this user
  restaurantReviews RestaurantReview[] @relation("CustomerReviews") // Restaurant reviews by this user
  dineInOrders      DineInOrder[]      @relation("CustomerDineInOrders") // Dine-in orders by this customer
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String      @unique
  customerId    String      @db.ObjectId // Reference to the user 
  customer      User        @relation("OrderCustomer", fields: [customerId], references: [id]) // Relation to the User model
  driverId      String?     @db.ObjectId // Reference to User (was Driver)
  driver        User?       @relation("OrderDriver", fields: [driverId], references: [id]) // Updated to User, explicit relation name
  addressId     String?     @db.ObjectId
  address       Address?    @relation("AddressOrders", fields: [addressId], references: [id])
  status        OrderStatus @default(PENDING)
  amount        Float       @default(0)
  resonOfcancel String?     @default("")
  paymentMethod String?     @default("CASH") // Default payment method
  deliveredAt   DateTime? // Date when the order was delivered

  items      OrderItem[]
  activeTrip ActiveTrip? // علاقة واحد لواحد (طلبية واحدة ← تتبع واحد)
  shiftId    String      @db.ObjectId // Ensure this matches Shift.id's native type
  shift      Shift       @relation(fields: [shiftId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // --- Added fields ---
  deliveryInstructions String? // تعليمات التوصيل
  ratings              OrderRating[] // Ratings for this order
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId // Explicitly define as ObjectId
  orderId   String @db.ObjectId // Ensure this matches the type of Order.id
  productId String @db.ObjectId
  quantity  Int    @default(0)
  price     Float  @default(0)
  order     Order? @relation(fields: [orderId], references: [id])
  product   Dish?  @relation(fields: [productId], references: [id])
}

model ActiveTrip {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @unique @db.ObjectId // أضفنا @unique هنا
  order       Order    @relation(fields: [orderId], references: [id])
  driverId    String   @db.ObjectId // Reference to User (was Driver)
  driver      User     @relation("ActiveTripDriver", fields: [driverId], references: [id]) // Updated to User, explicit relation name
  orderNumber String?
  latitude    String?
  longitude   String?
  updateCount Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([orderId, driverId])
}

model LocationHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  driverId  String // Should reference User.id
  orderId   String?
  latitude  String? // Latitude of the location
  longitude String? // Longitude of the location
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Counter {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  key     String @unique // A unique key to identify the counter (e.g., "order_counter")
  counter Int    @default(0)
}

model Shift {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name      String   @default("")
  startTime String   @default("")
  endTime   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orders Order[] // An order belongs to a specific shift
}

model Company {
  id             String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  fullName       String @default("") // Full name of the company owner/contact person
  email          String @default("") // Email address
  phoneNumber    String @default("") // Phone number
  whatsappNumber String @default("") // WhatsApp number
  logo           String @default("") // Profile picture URL
  profilePicture String @default("") // Profile picture URL
  bio            String @default("") // Bio/description

  twitter       String @default("") // Twitter URL
  linkedin      String @default("") // LinkedIn URL
  instagram     String @default("") // Instagram URL
  tiktok        String @default("") // TikTok URL
  facebook      String @default("") // Facebook URL
  snapchat      String @default("") // Snapchat URL
  website       String @default("") // Website URL
  address       String @default("") // Address of the company
  taxPercentage Int    @default(15) // Tax fee
  taxNumber     String @default("") // Tax number

  // --- Compliance IDs ---
  commercialRegistrationNumber String? // CR number (optional)
  saudiBusinessId              String? // Saudi Business/Enterprise ID (optional)

  workingHours String @default("")
  minShipping  Int    @default(0)
  shippingFee  Int    @default(0)

  latitude  String? // Latitude of the company location
  longitude String? // Longitude of the company location
  createdAt DateTime @default(now()) // Timestamp of creation
  updatedAt DateTime @updatedAt // Timestamp of last update

  // --- DB-backed settings (ENV to DB) ---
  // WhatsApp settings
  whatsappPermanentToken     String @default("")
  whatsappPhoneNumberId      String @default("")
  whatsappApiVersion         String @default("v23.0")
  whatsappBusinessAccountId  String @default("")
  whatsappWebhookVerifyToken String @default("")
  whatsappAppSecret          String @default("")
  whatsappEnvironment        String @default("production")

  // Email/SMTP settings
  emailUser String @default("")
  emailPass String @default("")
  smtpHost  String @default("")
  smtpPort  String @default("")
  smtpUser  String @default("")
  smtpPass  String @default("")
  smtpFrom  String @default("")

  // Analytics (GTM)
  gtmContainerId String @default("")

  // Cloudinary
  cloudinaryCloudName    String @default("")
  cloudinaryApiKey       String @default("")
  cloudinaryApiSecret    String @default("")
  cloudinaryUploadPreset String @default("")
  cloudinaryClientFolder String @default("images")

  // Pusher
  pusherAppId   String @default("")
  pusherKey     String @default("")
  pusherSecret  String @default("")
  pusherCluster String @default("")

  googleMapsApiKey String @default("")

  // Authentication
  authCallbackUrl    String  @default("")
  // Auth behavior toggles
  requireWhatsappOtp Boolean @default(false)
  // Location behavior toggles
  requireLocation    Boolean @default(true)

  // Platform Display Settings
  showHeroImage     Boolean @default(false)
  useHeroSlider     Boolean @default(false)
  showStoreLocation Boolean @default(false)
  showCustomerCount Boolean @default(false)
  showProductCount  Boolean @default(false)
  showVision2030    Boolean @default(false)

  // Notification Settings
  emailNotifications Boolean @default(false)

  // Currency Settings
  defaultCurrency String @default("SAR")

  // Homepage Hero Slider (additive-only, backward compatible)
  heroImages String[] @default([])
  heroSlides Json[]   @default([])
}

model NewLetter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}

model ContactSubmission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  replies   Reply[] // One-to-many relationship: one submission can have multiple replies
}

model Reply {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  content             String // The reply message
  sentAt              DateTime          @default(now()) // Timestamp for when the reply was sent
  contactSubmissionId String            @db.ObjectId // Ensure this matches the native type of ContactSubmission.id
  contactSubmission   ContactSubmission @relation(fields: [contactSubmissionId], references: [id])
}

model Changelog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  subject   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Timestamp of last update
}

// Enhanced Term model for policy management
model Term {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  title        String            @default("") // Policy title
  type         TermType          @default(GENERIC) // Policy type
  content      String            @default("") // Policy content
  version      Int               @default(1) // Version number
  isActive     Boolean           @default(true) // Active status
  isPublished  Boolean           @default(false) // Published status
  metadata     Json? // Additional metadata (compliance info, etc.)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  translations TermTranslation[] // Relation to term translations

  @@index([type, isActive]) // Index for efficient queries
  @@index([isPublished]) // Index for published policies
  @@map("terms")
}

// Enhanced Term Translation model
model TermTranslation {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  termId       String   @db.ObjectId
  term         Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
  languageCode String // e.g., "en", "ar-SA"
  title        String   @default("") // Translated title
  content      String // Translated term content
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([termId, languageCode])
  @@index([languageCode]) // Index for language-based queries
}

model GlobalSEO {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  entityId             String
  entityType           EntityType @default(PAGE)
  locale               String // Add this line 👈
  metaTitle            String
  metaDescription      String
  canonicalUrl         String?
  robots               String     @default("index, follow")
  openGraphTitle       String?
  openGraphDescription String?
  openGraphImage       String?
  twitterCardType      String?
  twitterImage         String?
  schemaOrg            Json?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@unique([entityId, entityType, locale]) // 👈 Update uniqueness to handle per-locale entries
}

model UserNotification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?          @db.ObjectId
  user      User?            @relation(fields: [userId], references: [id])
  title     String
  body      String
  type      NotificationType // <--- now uses enum!
  read      Boolean          @default(false)
  actionUrl String?
  icon      String?
  channel   String           @default("in-app")
  createdAt DateTime         @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  requestId String   @db.ObjectId
}

model Request {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  title       String // عنوان الطلب
  description String // وصف الطلب
  status      RequestStatus @default(PENDING)
  type        RequestType // نوع الطلب
  createdBy   String // اسم أو بريد العميل
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  attachment  String? // رابط مرفق (اختياري)
}

model CommentTechno {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdBy String
  createdAt DateTime @default(now())
  requestId String   @db.ObjectId
  // Optionally: isAdmin Boolean
}

model SupportPing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  message   String
  timestamp DateTime @default(now())
}

// Expense Model
model Expense {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float // قيمة المصروف
  note      String? // وصف أو ملاحظة
  category  String? // تصنيف المصروف (اختياري)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String? // المستخدم الذي أضاف المصروف
}

// Review Model for Product Ratings
model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int // 1-5 stars
  comment    String // Review text
  productId  String   @db.ObjectId
  userId     String   @db.ObjectId
  isVerified Boolean  @default(false) // Whether the user has purchased the product
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product Dish @relation(fields: [productId], references: [id])
  user    User @relation(fields: [userId], references: [id])
}

// Wishlist Model for User's Favorite Products
model WishlistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Dish     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

// Restaurant Favorites Model
model RestaurantFavorite {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  restaurantId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  
  @@unique([userId, restaurantId])
  @@map("restaurantfavorites")
}

// Category Model
model Category {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  slug               String                @unique
  description        String? // Optional description
  imageUrl           String? // Optional image URL for the category
  productAssignments CategoryProduct[] // Explicit relation via join table
  translations       CategoryTranslation[] // Relation to category translations
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
}

model CategoryProduct {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String   @db.ObjectId
  productId  String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Dish     @relation(fields: [productId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@unique([categoryId, productId])
}

// Model for Category Translations
model CategoryTranslation {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId   String   @db.ObjectId
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  languageCode String // e.g., "en", "ar-SA"
  name         String // Translated category name
  description  String? // Translated category description
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([categoryId, languageCode])
}

// Join table for Category and Product (Many-to-Many)

model AnalyticsSettings {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  // Used to ensure only one global analytics settings record exists
  singletonKey         String   @unique @default("global_analytics_settings")
  googleAnalyticsId    String?
  facebookPixelId      String?
  tiktokPixelId        String?
  snapchatPixelId      String?
  pinterestTagId       String?
  linkedinInsightTagId String?
  updatedAt            DateTime @updatedAt
}

model WebVital {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String // Metric name: LCP, FCP, CLS, INP, TTFB
  value      Float // Metric value
  page       String // Page route or URL
  userAgent  String // User agent string
  timestamp  DateTime // When the metric was recorded
  device     String? // Device type (mobile, desktop, etc.)
  browser    String? // Browser name/version
  city       String? // City from geolocation
  country    String? // Country from geolocation
  additional Json? // For future extensibility (e.g., connection, custom fields)
}

model Offer {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  slug               String  @unique
  description        String?
  bannerImage        String? // Optional - can be added later
  isActive           Boolean @default(true)
  displayOrder       Int     @default(0)
  hasDiscount        Boolean @default(false)
  discountPercentage Float? // Only if hasDiscount is true
  header             String? // Custom header for frontend
  subheader          String? // Custom subheader for frontend

  // Product relationships via join table
  productAssignments OfferProduct[] // Explicit relation via join table

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OfferProduct {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  offerId    String   @db.ObjectId
  productId  String   @db.ObjectId
  offer      Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)
  product    Dish     @relation(fields: [productId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@unique([offerId, productId])
}

// Cart models for the new server-side cart implementation
model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?    @unique @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Dish     @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Address {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @db.ObjectId
  user                 User     @relation(fields: [userId], references: [id])
  label                String   @default("المنزل") // e.g. المنزل، العمل
  district             String
  street               String
  buildingNumber       String
  floor                String?
  apartmentNumber      String?
  landmark             String?
  deliveryInstructions String?
  // 🗺️ CRITICAL: Coordinates for driver navigation
  latitude             String?
  longitude            String?
  isDefault            Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  orders               Order[]  @relation("AddressOrders")
}

model OrderRating {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String     @db.ObjectId
  userId    String     @db.ObjectId
  rating    Int
  comment   String?
  type      RatingType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([orderId, userId, type])
}

// --- About Page Content Models ---
model AboutPageContent {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  brandId       String // For multi-brand support
  heroTitle     String
  heroSubtitle  String
  heroImageUrl  String // URL for hero image
  missionTitle  String
  missionText   String
  features      Feature[]     @relation("AboutPageFeatures")
  testimonials  Testimonial[] @relation("AboutPageTestimonials")
  ctaTitle      String
  ctaText       String
  ctaButtonText String
  ctaButtonLink String
  faq           FAQ[]         @relation("AboutPageFAQ")
  contactLink   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Feature {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  aboutPageId String           @db.ObjectId
  aboutPage   AboutPageContent @relation("AboutPageFeatures", fields: [aboutPageId], references: [id], onDelete: Cascade)
  icon        String // Icon name or type
  title       String
  description String
  imageUrl    String // URL for feature image
}

model Testimonial {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  aboutPageId String           @db.ObjectId
  aboutPage   AboutPageContent @relation("AboutPageTestimonials", fields: [aboutPageId], references: [id], onDelete: Cascade)
  author      String
  text        String
  rating      Int
  imageUrl    String // URL for testimonial author image
}

model FAQ {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  aboutPageId String           @db.ObjectId
  aboutPage   AboutPageContent @relation("AboutPageFAQ", fields: [aboutPageId], references: [id], onDelete: Cascade)
  question    String
  answer      String
}

model ErrorLog {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  errorId    String        @unique // Human-readable error ID for users
  message    String // Error message
  stack      String? // Full error stack trace
  digest     String? // Next.js error digest
  url        String? // Page where error occurred
  userAgent  String? // Browser/device info
  userId     String?       @db.ObjectId // User who encountered error (if logged in)
  user       User?         @relation(fields: [userId], references: [id])
  severity   ErrorSeverity @default(MEDIUM)
  status     ErrorStatus   @default(NEW)
  resolved   Boolean       @default(false)
  resolvedBy String?       @db.ObjectId
  resolvedAt DateTime?
  notes      String? // Admin notes for fixing
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model WhatsappMessage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  companyId   String?  @db.ObjectId
  waMessageId String   @unique
  fromWa      String
  toWa        String
  direction   String // 'inbound' | 'outbound'
  type        String // 'text' | 'image' | 'interactive' | 'unknown'
  text        String?
  raw         Json
  receivedAt  DateTime @default(now())

  // Denormalized latest status
  lastStatus   String?
  lastStatusAt DateTime?
}

model WhatsappMessageStatus {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  companyId   String?  @db.ObjectId
  waMessageId String
  status      String // 'sent' | 'delivered' | 'read' | 'failed' | 'unknown'
  reason      String?
  raw         Json
  occurredAt  DateTime @default(now())

  @@unique([waMessageId, occurredAt])
}

model DineInOrder {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber  String             @unique
  restaurantId String             @db.ObjectId
  restaurant   Restaurant         @relation("RestaurantDineInOrders", fields: [restaurantId], references: [id])
  customerId   String             @db.ObjectId
  customer     User               @relation("CustomerDineInOrders", fields: [customerId], references: [id])
  
  tableNumber  String             // Changed from Int to String
  tableId      String?            @db.ObjectId // Optional link to RestaurantTable
  table        RestaurantTable?   @relation(fields: [tableId], references: [id])
  orderType    OrderType          @default(DINE_IN)
  status       DineInOrderStatus  @default(NEW)
  
  subtotal     Float
  taxRate      Float              @default(0.15)
  taxAmount    Float
  total        Float
  
  items        DineInOrderItem[]
  
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  completedAt  DateTime?
  
  @@index([restaurantId, status])
  @@index([tableNumber])
  @@index([tableId])
  @@map("dineinorders")
}

model DineInOrderItem {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String       @db.ObjectId
  order     DineInOrder  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  dishId    String       @db.ObjectId
  dish      Dish         @relation("DishDineInOrders", fields: [dishId], references: [id])
  dishName  String
  dishImage String?
  quantity  Int
  price     Float
  notes     String?      @default("")
  createdAt DateTime     @default(now())
  
  @@map("dineinorderitems")
}

// ============================================
// RESTAURANT TABLES
// ============================================

model RestaurantTable {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String        @db.ObjectId
  tableNumber  String        // Can be "1", "A1", "VIP-5", etc.
  capacity     Int           // Number of seats
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders       DineInOrder[]
  
  @@unique([restaurantId, tableNumber])
  @@index([restaurantId])
  @@map("restauranttables")
}
